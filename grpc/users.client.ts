// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "users.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { users } from "./users";
import type { UpdateUserResponse } from "./users";
import type { UpdateUserRequest } from "./users";
import type { RegistrationResponse } from "./users";
import type { RegistrationRequest } from "./users";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoginResponse } from "./users";
import type { LoginRequest } from "./users";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service users
 */
export interface IusersClient {
    /**
     * @generated from protobuf rpc: login(LoginRequest) returns (LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: register(RegistrationRequest) returns (RegistrationResponse);
     */
    register(input: RegistrationRequest, options?: RpcOptions): UnaryCall<RegistrationRequest, RegistrationResponse>;
    /**
     * @generated from protobuf rpc: updateUser(UpdateUserRequest) returns (UpdateUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse>;
}
/**
 * @generated from protobuf service users
 */
export class usersClient implements IusersClient, ServiceInfo {
    typeName = users.typeName;
    methods = users.methods;
    options = users.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: login(LoginRequest) returns (LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: register(RegistrationRequest) returns (RegistrationResponse);
     */
    register(input: RegistrationRequest, options?: RpcOptions): UnaryCall<RegistrationRequest, RegistrationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegistrationRequest, RegistrationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: updateUser(UpdateUserRequest) returns (UpdateUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UpdateUserResponse>("unary", this._transport, method, opt, input);
    }
}
